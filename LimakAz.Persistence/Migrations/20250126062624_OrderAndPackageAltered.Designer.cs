// <auto-generated />
using System;
using LimakAz.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LimakAz.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250126062624_OrderAndPackageAltered")]
    partial class OrderAndPackageAltered
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LimakAz.Domain.Entities.AddressLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("AddressLines");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-VergiNo",
                            Value = "6081089593"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-Ulke",
                            Value = "Türkiye"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-VergiDairesi",
                            Value = "Şişli"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-PostKodu",
                            Value = "34060"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-Telefon",
                            Value = "05364700021"
                        },
                        new
                        {
                            Id = 6,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-İlce",
                            Value = "Eyüpsultan"
                        },
                        new
                        {
                            Id = 7,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-TCKimlik",
                            Value = "35650276048"
                        },
                        new
                        {
                            Id = 8,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-Semt",
                            Value = "Güzeltepe mahallesi"
                        },
                        new
                        {
                            Id = 9,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-IlSehir",
                            Value = "İstanbul"
                        },
                        new
                        {
                            Id = 10,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-AdressSatir",
                            Value = ",Güzeltepe mahallesi,Akdeniz caddesi no:33/A"
                        },
                        new
                        {
                            Id = 11,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-AdressBasligi",
                            Value = "LIMAK"
                        },
                        new
                        {
                            Id = 12,
                            CountryId = 1,
                            Key = "XaricdekiUnvanlar-AdSoyad",
                            Value = "LİMAK TAŞIMACILIK DIŞ TİCARET LİMİTED ŞİRKETİ"
                        },
                        new
                        {
                            Id = 13,
                            CountryId = 1,
                            Key = "Is-Saatlari",
                            Value = "Həftəiçi 5 gün: 09:00 - 17:00\r\nŞənbə: 09:00 - 14:00\r\nBazar günü qeyri-iş günüdür."
                        },
                        new
                        {
                            Id = 14,
                            CountryId = 2,
                            Key = "Street-Address",
                            Value = "1234 Elm Street, Suite 567"
                        },
                        new
                        {
                            Id = 15,
                            CountryId = 2,
                            Key = "City",
                            Value = "New York"
                        },
                        new
                        {
                            Id = 16,
                            CountryId = 2,
                            Key = "State",
                            Value = "NY"
                        },
                        new
                        {
                            Id = 17,
                            CountryId = 2,
                            Key = "ZIP-Code",
                            Value = "10001"
                        },
                        new
                        {
                            Id = 18,
                            CountryId = 2,
                            Key = "Country",
                            Value = "USA"
                        },
                        new
                        {
                            Id = 19,
                            CountryId = 2,
                            Key = "Phone-Number",
                            Value = "+1-555-123-4567"
                        },
                        new
                        {
                            Id = 20,
                            CountryId = 2,
                            Key = "Working-Hours",
                            Value = "Mon-Fri, 9:00 AM - 5:00 PM EST"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("AZNBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CitizenShipId")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FinCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LocalPointId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TRYBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<decimal>("USDBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("UserPositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CitizenShipId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LocalPointId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserPositionId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LogoPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "default",
                            IsDeleted = false,
                            LogoPath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1736343697/slhpbhpb8kz0t8aounk7.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "default"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "default",
                            IsDeleted = false,
                            LogoPath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1736343830/rqv6ofcjthjh5xvkbejy.png",
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "default"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CategoryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CategoryDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            LanguageId = 1,
                            Name = "Qeyim"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            LanguageId = 2,
                            Name = "Одежда"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 2,
                            LanguageId = 1,
                            Name = "Kosmetika"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 2,
                            LanguageId = 2,
                            Name = "Косметика"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Certificates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735148773/LimakAz/fhe6fq69cr1lqamzvhsm.png",
                            Link = "https://www.iata.org/"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735148773/LimakAz/usq5qshiktvvcioeu0xe.png",
                            Link = "https://www.turkishairlines.com/"
                        },
                        new
                        {
                            Id = 3,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735148773/LimakAz/qtiaad8swg6yvs8jobdj.png",
                            Link = "https://fiata.org/"
                        },
                        new
                        {
                            Id = 4,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735148773/LimakAz/ovgeyi6xr3eahskj0u8f.png",
                            Link = "https://limaklogistic.com/tr"
                        },
                        new
                        {
                            Id = 5,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735148773/LimakAz/m9q1xavaxdofuxsc380m.png",
                            Link = "https://www.silkwaywest.com/"
                        },
                        new
                        {
                            Id = 6,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735148773/LimakAz/l9ropu52ecsgkqyd3uej.png",
                            Link = "https://apagroup.az/az"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ModeratorId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ModeratorId");

                    b.HasIndex("UserId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CitizenShip", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("CitizenShips");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CitizenShipDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CitizenShipId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenShipId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CitizenShipDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CitizenShipId = 1,
                            LanguageId = 1,
                            Name = "Azərbaycan"
                        },
                        new
                        {
                            Id = 2,
                            CitizenShipId = 1,
                            LanguageId = 2,
                            Name = "Азербайджан"
                        },
                        new
                        {
                            Id = 3,
                            CitizenShipId = 2,
                            LanguageId = 1,
                            Name = "Xarici"
                        },
                        new
                        {
                            Id = 4,
                            CitizenShipId = 2,
                            LanguageId = 2,
                            Name = "Другое"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Content", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PageType")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.ContentDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("ContentDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Defaul",
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735590904/rfvtik0wyqjxlieecbfm.png",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Defaul",
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735590817/gdrkuwphkhe9f2d0sovw.png",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CountryDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("LanguageId");

                    b.ToTable("CountryDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            LanguageId = 1,
                            Name = "Turkiye"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 1,
                            LanguageId = 2,
                            Name = "Турция"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 2,
                            LanguageId = 1,
                            Name = "Amerika"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 2,
                            LanguageId = 2,
                            Name = "Америка"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Genders");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.GenderDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.ToTable("GenderDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            GenderId = 1,
                            LanguageId = 1,
                            Name = "Qadin"
                        },
                        new
                        {
                            Id = 2,
                            GenderId = 2,
                            LanguageId = 1,
                            Name = "Kişi"
                        },
                        new
                        {
                            Id = 3,
                            GenderId = 1,
                            LanguageId = 2,
                            Name = "Женщина"
                        },
                        new
                        {
                            Id = 4,
                            GenderId = 2,
                            LanguageId = 2,
                            Name = "Мужчина"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IsoCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "",
                            IsoCode = "az",
                            Name = "AZE"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "",
                            IsoCode = "ru",
                            Name = "RU"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.LocalPoint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LocalPoints");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Defaul",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Defaul",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.LocalPointDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("LocalPointId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkingHourse")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LocalPointId");

                    b.ToTable("LocalPointDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Gəncə şəhəri, Kəpəz rayonu, Əziz Əliyev prospekti, 5A. (Köhnə Yevlax avtovağzalı və Neon dəyirmanının yaxınlığı)",
                            LanguageId = 1,
                            LocalPointId = 1,
                            Name = "Limak - Gəncə",
                            WorkingHourse = "Bazar ertəsi-şənbə\r\nSaat 10:00 - 20:00\r\n\r\nŞənbə\r\nSaat 10:00 - 20:00"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Город Гянджа, Кепазский район, проспект Азиза Алиева, 5А. (Рядом с автовокзалом Евлаха и Неоновой мельницей)",
                            LanguageId = 2,
                            LocalPointId = 1,
                            Name = "Limak - Гянджа",
                            WorkingHourse = "Понедельник-Суббота\r\nС 10:00 до 20:00\r\n\r\nСуббота\r\nС 10:00 до 20:00"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Nizami rayonu, Qara Qarayev prospekti, 125a (Səhhət klinikasının yaxınlığı)",
                            LanguageId = 1,
                            LocalPointId = 2,
                            Name = "Limak - Xalqlar Dostluğu",
                            WorkingHourse = "Bazar ertəsi-şənbə\r\nSaat 10:00 - 20:00\r\n\r\nŞənbə\r\nSaat 10:00 - 20:00"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Низаминский район, проспект Кара Караева, 125а ( возле поликлиники “SƏHHƏT” )",
                            LanguageId = 2,
                            LocalPointId = 2,
                            Name = "Limak - Халглар Достлугу",
                            WorkingHourse = "Понедельник-Суббота\r\nС 10:00 до 20:00\r\n\r\nСуббота\r\nС 10:00 до 20:00"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("News");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Defaul",
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1737841428/LimakAz/tkqkwproumeajbfifprs.jpg",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Defaul",
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1737841438/LimakAz/m4yxdcrc4jy33iapjela.jpg",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedBy = "Defaul",
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1737841534/LimakAz/yccukiy8giu0hsx76ria.jpg",
                            IsDeleted = false,
                            UpdatedAt = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UpdatedBy = "Default"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.NewsDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("NewsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NewsId");

                    b.ToTable("NewDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Dəyərli müştərilər, çoxsaylı istəkləri nəzərə alaraq, yeni açılan Quba filialımız artıq xidmətinizdədir. Quba filialının ünvanı: Quba şəhəri, Fətəli xan və Səməd Vurğun küçəsinin kəsişməsi. \r\n \r\n Seçdiyiniz məhsulların linkini bizə göndərməklə sifarişlərinizi SifarişEt xidmətimizə həvalə edin. Amerika və Türkiyədən gələn bağlamalarınızı filiallardan, kuryerlərimizdən və ya kargomatlardan təhvil ala bilərsiniz. Limak komandası rahat alış-veriş və sürətli çatdırılma ilə xidmətinizdədir!",
                            LanguageId = 1,
                            NewsId = 1,
                            Title = "Limakın yeni Quba filialı!"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Уважаемые клиенты, учитывая многочисленные запросы, наш филиал Губа теперь к вашим услугам. Адрес Губинского филиала: г. Губа, пересечение улиц Фатали Хана и Самеда Вургуна. \r\n \r\n Отправьте ссылку на выбранные вами продукты, и пусть наша служба «Заказать» обработает ваши заказы. Посылки из Америки и Турции вы можете получить в наших филиалах, в ближайших каргоматах или заказать доставку курьером. Команда Limak к вашим услугам, удобные покупки и быстрая доставка!",
                            LanguageId = 2,
                            NewsId = 1,
                            Title = "Новый филиал Лимака в Губе!"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Amerikadan daşınma tariflərinə yenilik etdik!\r\n \r\n Hörmətli müştərilər, nəzərinizə çatdıraq ki, Amerika tariflərimiz 20 iyul 2024-cü il tarixindən etibarən yenilənir! \r\n \r\n\r\nQeyd olunan tarixdən başlayaraq xarici anbarımıza daxil olan bağlamaların daşınma haqqı çəkiyə uyğun olaraq, yeni tarifə əsasən hesablanacaq! Yeni qiymətlər hazırda bazar rəqabətinə uyğun tənzimlənib. \r\n \r\n\r\nLimak komandası güvənli alış-veriş və sürətli çatdırılma ilə xidmətinizdədir!\r\n \r\n\r\nUzağı yaxın etdik!  ",
                            LanguageId = 1,
                            NewsId = 2,
                            Title = "Amerika tariflərimiz yeniləndi!"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Наши американские тарифы обновлены!\r\n \r\n\r\nУважаемые клиенты, позвольте обратить ваше внимание на то, что наши американские тарифы будут обновлены с 20 июля 2024 года! \r\n \r\n\r\nНачиная с указанной даты, стоимость доставки посылок, поступающих на наш зарубежный склад, будет рассчитываться в зависимости от веса, согласно новому тарифу! Обновленные цены в настоящее время скорректированы с учетом рыночной конкуренции.\r\n \r\n\r\nКоманда Limak к вашим услугам, вместе с удобным шоппингом и быстрой доставкой. \r\n \r\n\r\nМы стали еще ближе к вам! ",
                            LanguageId = 2,
                            NewsId = 2,
                            Title = "Наши американские тарифы обновлены!"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Limak.az - güvənli və sürətli karqo xidməti\r\n \r\n 5 ildən çoxdur ki, sürətli və güvənli karqo şirkəti olaraq fəaliyyət göstəririk. Bizim üçün müştəri məmnuniyyəti ən vacib prioritetlərdən biridir. Biz, sifarişləri ən qısa zamanda, təhlükəsiz çatdıraraq, müştərilərin güvənini qazanmağı bacarmışıq. Bütün ehtiyaclarınızı nəzərə alaraq, xidmətlərimizi davamlı olaraq təkmilləşdirir və müştərilərimizə ən yüksək, keyfiyyətli xidmətlər təklif edirik.\r\n\r\n \r\n\r\nMüştəriləri sevindirəcək xəbər\r\n \r\n Daha sına biləcək bağlamalarınıza görə narahat olmağınıza ehtiyac yoxdur! Sifarişlərinizin güvənli çatdırılması üçün Limak.az karqo şirkəti olaraq, növbəti istəyinizi əlçatan etdik. Hər kəsə məlumdur ki, bir çox hallarda karqo şirkətləri bağlamaların təhlükəsizliyinə görə məsuliyyət daşımır. Lakin biz, müştəriləri düşünərək, sınma təhlükəsi olan bağlamaları xüsusi qablaşdırma və güvənli daşıma ilə sizə çatdırırıq. Beləliklə, sifariş olunan qablar sınmayacaq. Limak.az ilə Türkiyədən istənilən məhsulları əminliklə sifariş edə bilərsiniz.",
                            LanguageId = 1,
                            NewsId = 3,
                            Title = "Türkiyədən bağlamalarınızı güvənli çatdırırıq"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Limak.az - надежная и быстрая служба доставки\r\n\r\nУже более 5 лет мы работаем как быстрая и надежная компания по доставке. Лояльность наших клиентов - один из наших главных приоритетов. Мы добились доверия клиентов, доставляя заказы в кратчайшие сроки и с полной безопасностью. Учитывая все ваши потребности, мы постоянно совершенствуем наши услуги и предлагаем нашим клиентам самые качественные сервисы.\r\n\r\n \r\n\r\nНовость, которая порадует клиентов\r\n\r\n\r\nТеперь вам больше не придется беспокоиться о своих посылках, с хрупким товаром! Для безопасной доставки ваших заказов компания Limak.az сделала ваш очередной запрос доступным. Всем известно, что во многих случаях грузовые компании не несут ответственности за сохранность посылок. Однако, думая о наших клиентах, мы доставляем посылки с риском повреждения в специальной упаковке и с безопасной транспортировкой. Так, заказанная посуда не разобьется. С Limak.az вы можете с уверенностью заказывать любые товары из Турции.",
                            LanguageId = 2,
                            NewsId = 3,
                            Title = "Мы безопасно доставим ваши посылки из Турции"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.NotificationDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CargoPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("ItemPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("LocalCargoPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NO")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OrderTotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PackageId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int?>("ShopId")
                        .HasColumnType("int");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId1")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AppUserId");

                    b.HasIndex("CountryId");

                    b.HasIndex("PackageId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("ShopId");

                    b.HasIndex("StatusId");

                    b.HasIndex("StatusId1");

                    b.HasIndex("UserId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Package", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LocalPointId")
                        .HasColumnType("int");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalCargoPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalWeigth")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LocalPointId");

                    b.HasIndex("PaymentId");

                    b.HasIndex("StatusId");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConfirmToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<int>("ReceptId")
                        .HasColumnType("int");

                    b.Property<string>("SecretId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Key = "Address"
                        },
                        new
                        {
                            Id = 2,
                            Key = "WorkingHours"
                        },
                        new
                        {
                            Id = 3,
                            Key = "SupportPhone"
                        },
                        new
                        {
                            Id = 4,
                            Key = "InstagramLink"
                        },
                        new
                        {
                            Id = 5,
                            Key = "FacebookLink"
                        },
                        new
                        {
                            Id = 6,
                            Key = "TwitterLink"
                        },
                        new
                        {
                            Id = 7,
                            Key = "YoutubeLink"
                        },
                        new
                        {
                            Id = 8,
                            Key = "TiktokLink"
                        },
                        new
                        {
                            Id = 9,
                            Key = "Copyright"
                        },
                        new
                        {
                            Id = 10,
                            Key = "AppstoreLink"
                        },
                        new
                        {
                            Id = 11,
                            Key = "GoogleplayLink"
                        },
                        new
                        {
                            Id = 12,
                            Key = "Title"
                        },
                        new
                        {
                            Id = 13,
                            Key = "SupportLineImage"
                        },
                        new
                        {
                            Id = 14,
                            Key = "Email"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.SettingDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("SettingId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SettingId");

                    b.ToTable("SettingDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            SettingId = 1,
                            Value = " Səbail rayonu, Lermontov küç. 40A"
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            SettingId = 1,
                            Value = "Сабаильский район, ул. Лермонтова 40А"
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 1,
                            SettingId = 2,
                            Value = "Bazar ertəsi-cümə"
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 2,
                            SettingId = 2,
                            Value = "Понедельник-Пятница"
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = 1,
                            SettingId = 3,
                            Value = "9595"
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = 2,
                            SettingId = 3,
                            Value = "9595"
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = 1,
                            SettingId = 4,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = 2,
                            SettingId = 4,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = 1,
                            SettingId = 5,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = 2,
                            SettingId = 5,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 11,
                            LanguageId = 1,
                            SettingId = 6,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 12,
                            LanguageId = 2,
                            SettingId = 6,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 13,
                            LanguageId = 1,
                            SettingId = 7,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 14,
                            LanguageId = 2,
                            SettingId = 7,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 15,
                            LanguageId = 1,
                            SettingId = 8,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 16,
                            LanguageId = 2,
                            SettingId = 8,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 17,
                            LanguageId = 1,
                            SettingId = 9,
                            Value = "© 2019 - 2024 Limak.az | Bütün hüquqlar qorunur"
                        },
                        new
                        {
                            Id = 18,
                            LanguageId = 2,
                            SettingId = 9,
                            Value = "© 2019 - 2024 Limak.az | Все права защищены"
                        },
                        new
                        {
                            Id = 19,
                            LanguageId = 1,
                            SettingId = 10,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 20,
                            LanguageId = 2,
                            SettingId = 10,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 21,
                            LanguageId = 1,
                            SettingId = 11,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 22,
                            LanguageId = 2,
                            SettingId = 11,
                            Value = "https://www.instagram.com/asmannn18"
                        },
                        new
                        {
                            Id = 23,
                            LanguageId = 1,
                            SettingId = 12,
                            Value = "Tariflər | Amerika və Türkiyədən kargo | Limak.az - Daşınma qiymetleri"
                        },
                        new
                        {
                            Id = 24,
                            LanguageId = 2,
                            SettingId = 12,
                            Value = "Грузы из Америки и Турции Тарифы | Limak.az - цены на доставку"
                        },
                        new
                        {
                            Id = 25,
                            LanguageId = 1,
                            SettingId = 13,
                            Value = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735583341/LimakAz/ggh5cyvitqg56p1avgef.svg"
                        },
                        new
                        {
                            Id = 26,
                            LanguageId = 2,
                            SettingId = 13,
                            Value = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1735583605/LimakAz/zkp51genu3lmjahjuox7.svg"
                        },
                        new
                        {
                            Id = 27,
                            LanguageId = 1,
                            SettingId = 14,
                            Value = "info@limak.az"
                        },
                        new
                        {
                            Id = 28,
                            LanguageId = 2,
                            SettingId = 14,
                            Value = "info@limak.az"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Shop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.ShopCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ShopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("ShopId");

                    b.ToTable("ShopCategories");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Sliders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1737841750/LimakAz/r8uyjrt2rhcdmhte1ahu.png"
                        },
                        new
                        {
                            Id = 2,
                            ImagePath = "https://res.cloudinary.com/dsclrbdnp/image/upload/v1737841753/LimakAz/tysnef6of1mfpuur3ejj.jpg"
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        },
                        new
                        {
                            Id = 3
                        },
                        new
                        {
                            Id = 4
                        },
                        new
                        {
                            Id = 5
                        },
                        new
                        {
                            Id = 6
                        },
                        new
                        {
                            Id = 7
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.StatusDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StatusId");

                    b.ToTable("StatusDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            Name = "Sifariş edilməyib",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            Name = "Не заказано",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 1,
                            Name = "Sifariş edilib",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 2,
                            Name = "Заказано",
                            StatusId = 2
                        },
                        new
                        {
                            Id = 5,
                            LanguageId = 1,
                            Name = "Ödəniş olunub",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 6,
                            LanguageId = 2,
                            Name = "Оплачено",
                            StatusId = 3
                        },
                        new
                        {
                            Id = 7,
                            LanguageId = 1,
                            Name = "Yoldadır",
                            StatusId = 4
                        },
                        new
                        {
                            Id = 8,
                            LanguageId = 2,
                            Name = "В пути",
                            StatusId = 4
                        },
                        new
                        {
                            Id = 9,
                            LanguageId = 1,
                            Name = "Yerli anbardadır",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 10,
                            LanguageId = 2,
                            Name = "На местном складе",
                            StatusId = 5
                        },
                        new
                        {
                            Id = 11,
                            LanguageId = 1,
                            Name = "Sifariş tamamlandı",
                            StatusId = 6
                        },
                        new
                        {
                            Id = 12,
                            LanguageId = 2,
                            Name = "Заказ выполнен",
                            StatusId = 6
                        },
                        new
                        {
                            Id = 13,
                            LanguageId = 1,
                            Name = "Ləğv edilib",
                            StatusId = 7
                        },
                        new
                        {
                            Id = 14,
                            LanguageId = 2,
                            Name = "Отменено",
                            StatusId = 7
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Tariff", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal>("MaxValue")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("MinValue")
                        .HasColumnType("decimal(6,3)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,3)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UpdatedBy")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Tariffs");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.UserPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("UserPositions");

                    b.HasData(
                        new
                        {
                            Id = 1
                        },
                        new
                        {
                            Id = 2
                        });
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.UserPositionDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserPositionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserPositionId");

                    b.ToTable("UserPositionDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LanguageId = 1,
                            Name = "Fiziki şəxs",
                            UserPositionId = 1
                        },
                        new
                        {
                            Id = 2,
                            LanguageId = 2,
                            Name = "Физическое лицо",
                            UserPositionId = 1
                        },
                        new
                        {
                            Id = 3,
                            LanguageId = 1,
                            Name = "Hüquq şəxs",
                            UserPositionId = 2
                        },
                        new
                        {
                            Id = 4,
                            LanguageId = 2,
                            Name = "Юридическое лицо",
                            UserPositionId = 2
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.AddressLine", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.AppUser", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.CitizenShip", "CitizenShip")
                        .WithMany()
                        .HasForeignKey("CitizenShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.LocalPoint", "LocalPoint")
                        .WithMany()
                        .HasForeignKey("LocalPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.UserPosition", "UserPosition")
                        .WithMany()
                        .HasForeignKey("UserPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitizenShip");

                    b.Navigation("Gender");

                    b.Navigation("LocalPoint");

                    b.Navigation("UserPosition");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CategoryDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Category", "Category")
                        .WithMany("CategoryDetails")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Chat", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.AppUser", "Moderator")
                        .WithMany()
                        .HasForeignKey("ModeratorId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("LimakAz.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Moderator");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CitizenShipDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.CitizenShip", "CitizenShip")
                        .WithMany("CitizenShipDetails")
                        .HasForeignKey("CitizenShipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CitizenShip");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.ContentDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Content", "Content")
                        .WithMany("ContentDetails")
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Content");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CountryDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Country", "Country")
                        .WithMany("CountryDetails")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.GenderDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Gender", "Gender")
                        .WithMany("GenderDetails")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.LocalPointDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.LocalPoint", "LocalPoint")
                        .WithMany("LocalPointDetails")
                        .HasForeignKey("LocalPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LocalPoint");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Message", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.AppUser", "User")
                        .WithMany("Messages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.NewsDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.News", "News")
                        .WithMany("NewsDetails")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("News");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Notification", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.AppUser", null)
                        .WithMany("Notifications")
                        .HasForeignKey("AppUserId");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.NotificationDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Notification", "Notification")
                        .WithMany("NotificationDetails")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Order", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.AppUser", null)
                        .WithMany("Orders")
                        .HasForeignKey("AppUserId");

                    b.HasOne("LimakAz.Domain.Entities.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Package", "Package")
                        .WithMany()
                        .HasForeignKey("PackageId");

                    b.HasOne("LimakAz.Domain.Entities.Payment", null)
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId");

                    b.HasOne("LimakAz.Domain.Entities.Shop", "Shop")
                        .WithMany()
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LimakAz.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Status", null)
                        .WithMany("Orders")
                        .HasForeignKey("StatusId1");

                    b.HasOne("LimakAz.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Package");

                    b.Navigation("Shop");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Package", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.LocalPoint", "LocalPoint")
                        .WithMany()
                        .HasForeignKey("LocalPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Status", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocalPoint");

                    b.Navigation("Payment");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.SettingDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Setting", "Setting")
                        .WithMany("SettingDetails")
                        .HasForeignKey("SettingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Setting");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Shop", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Country", "Country")
                        .WithMany("Shops")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.ShopCategory", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Shop", "Shop")
                        .WithMany("ShopCategories")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.StatusDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.Status", "Status")
                        .WithMany("StatusDetails")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Tariff", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Country", "Country")
                        .WithMany("Tariffs")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.UserPositionDetail", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.UserPosition", "UserPosition")
                        .WithMany("UserPositionDetails")
                        .HasForeignKey("UserPositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("UserPosition");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LimakAz.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LimakAz.Domain.Entities.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.AppUser", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Category", b =>
                {
                    b.Navigation("CategoryDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Chat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.CitizenShip", b =>
                {
                    b.Navigation("CitizenShipDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Content", b =>
                {
                    b.Navigation("ContentDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Country", b =>
                {
                    b.Navigation("CountryDetails");

                    b.Navigation("Shops");

                    b.Navigation("Tariffs");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Gender", b =>
                {
                    b.Navigation("GenderDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.LocalPoint", b =>
                {
                    b.Navigation("LocalPointDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.News", b =>
                {
                    b.Navigation("NewsDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Notification", b =>
                {
                    b.Navigation("NotificationDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Setting", b =>
                {
                    b.Navigation("SettingDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Shop", b =>
                {
                    b.Navigation("ShopCategories");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.Status", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("StatusDetails");
                });

            modelBuilder.Entity("LimakAz.Domain.Entities.UserPosition", b =>
                {
                    b.Navigation("UserPositionDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
